#ifndef LIGHT_H
#define LIGHT_H

/**
 * @file   light.h
 * @author Eric Turner <elturner@eecs.berkeley.edu>
 * @brief  The light_t class represents a light source
 *
 * @section DESCRIPTION
 *
 * This file contains the light_t class, which is used to represent
 * a light source.  Light sources can be either point sources or
 * directional light sources.
 */

#include <color/color.h>
#include <Eigen/Dense>
#include <cmath>

/**
 * The light_t class represents a light source
 *
 * A light source can be represented either as a point source or
 * a directional source.
 */
class light_t
{
	/* parameters */
	private:

		/**
		 * The vector of this light.
		 *
		 * If this light is a point light source,
		 * this vector represents the position of the
		 * light in 3D space.
		 *
		 * If this light is a directional light source,
		 * this vector represents that normalized direction.
		 */
		Eigen::Vector3f v;

		/**
		 * The color of this light source
		 */
		color_t color;

		/**
		 * Determines whether this light source is a
		 * point source or a directional source.
		 *
		 * If true, then this is a point light source.
		 * Otherwise, it is a directional light source.
		 */
		bool is_point;

	/* functions */
	public:

		/*--------------*/
		/* constructors */
		/*--------------*/

		/**
		 * Default constructor
		 *
		 * This gives a directional, white light in direction
		 * <1,0,0>.
		 */
		light_t()
		{
			this->v << 1.0f, 0.0f, 0.0f;
			this->color.set(1.0f, 1.0f, 1.0f);
			this->is_point = false;
		};

		/**
		 * Constructs this light from the other light
		 *
		 * @param other  The other light to copy
		 */
		light_t(const light_t& other)
			: v(other.v), 
			  color(other.color), 
			  is_point(other.is_point)
		{};

		/**
		 * Constructs light with specified parameters
		 *
		 * @param p   Specifies if light source is point or not
		 * @param x   The x-value of the vector
		 * @param y   The y-value of the vector
		 * @param z   The z-value of the vector
		 * @param r   The red-component of the color
		 * @param g   The green-component of the color
		 * @param b   The blue-component of the color
		 */
		light_t(bool p, float x, float y, float z, 
				float r, float g, float b)
			: v(x,y,z), color(r,g,b), is_point(p)
		{
			/* if directional, normalize */
			if(!(this->is_point))
				v.normalize();
		};

		/*-----------*/
		/* accessors */
		/*-----------*/

		/**
		 * Gets the color for this light source
		 *
		 * @return    Returns the color of this light source
		 */
		inline const color_t& get_color() const
		{ return this->color; };

		/**
		 * Gets the color for this light source
		 *
		 * @return    Returns the color of this light source
		 */
		inline color_t& get_color()
		{ return this->color; };

		/**
		 * Returns true if this is a point light source
		 */
		inline bool get_is_point() const
		{ return this->is_point; };

		/**
		 * Gets the value vector
		 *
		 * For a point light source, this is the position
		 *
		 * For a directional light source, this is the
		 * direction.
		 *
		 * @return Returns the vector component
		 */
		inline const Eigen::Vector3f& get_v() const
		{ return this->v; };

		/**
		 * Gets the direction of the light at the given point
		 *
		 * Given a point in 3D space, will specify the direction
		 * of the light generated by this light source.
		 *
		 * This is the direction FROM the source TO the point.
		 *
		 * @param p   The point to analyze
		 *
		 * @return    The direction of the light at p
		 */
		inline Eigen::Vector3f get_direction(
				const Eigen::Vector3f& p) const
		{
			Eigen::Vector3f L;

			/* check what type of light source this is */
			if(this->is_point)
			{
				/* need to compute displacement of
				 * the point in order to determine the
				 * direction of the light */
				return (p - this->v).normalized();
			}
			
			/* this is a directional light source */
			return this->v; /* direction is constant */
		};

		/**
		 * Sets the source of this light
		 *
		 * @param ispoint  If true, this is a point light source,
		 *                 otherwise it's a directional light source
		 * @param val      If ispoint is true, this is the position
		 *                 of the light source in 3D space.  If
		 *                 ispoint is false, then this is the
		 *                 direction of the directional light
		 *                 source.
		 */
		inline void set(bool ispoint, const Eigen::Vector3f& val)
		{
			/* copy values */
			this->is_point = ispoint;
			this->v = val;

			/* if this is a directional light source, then
			 * make sure it's a normalized vector */
			if(!(this->is_point))
				this->v.normalize();
		}

		/**
		 * Rotates the light about the y-axis
		 *
		 * Will rotate the direction or position of the light
		 * about the y-axis by the given amount.
		 *
		 * @param dtheta  The change in theta to rotate the light,
		 *                in radians.
		 */
		void rotateY(float dtheta)
		{
			/* construct matrix */
			Eigen::Matrix3f R;
			R          << cos(dtheta),  0,  sin(dtheta),
			              0,            1,  0,
				      -sin(dtheta), 0,  cos(dtheta);

			/* apply rotation */
			this->v = R * this->v;

		};
};

#endif
